/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package eva2_1_lista_simple;

/**
 *
 * @author moviles
 */
public class Lista {
    private Nodo inicio;
    private Nodo fin;

    //Por default, la lista esta vacía
    public Lista() {
        this.inicio = null;//No hay nodos en la lista
        this.fin = null;
    }
    public void imprimir(){
        if(inicio == null)
            System.out.println("LISTA VACÍA");
        else{
        Nodo temp = inicio;
        //¿Cómo muevo a temp?
        while(temp != null){
            System.out.print(temp.getValor() + " - ");
            temp = temp.getSiguiente();
        }
        System.out.println("");
    }
}
    
    //AGREGAR UN NODO AL FINAL DE LA LISTA
    //SOLUCION 1: O(N)
    public void agregar(int valor){
        Nodo nuevoNodo = new Nodo(valor);
        
        //Verificar si hay nodos en la lista
        if(inicio == null){//No hay nodos en la lista
            inicio = nuevoNodo;
            fin = nuevoNodo;
        }else{//Hay nodos en la lista
            //Hay que movernos por la lista
            //Usando un nodo temporal hasta el
            //Último nodo de la lista
            /*Nodo temp = inicio;
            //¿Cómo muevo a temp?
            while(temp.getSiguiente() != null){
            temp = temp.getSiguiente();
        }
            temp.setSiguiente(nuevoNodo);*/
            fin.setSiguiente(nuevoNodo);
            fin = nuevoNodo;
        }
    }
    public int tamaLista(){
        int cont = 0;
        Nodo temp = inicio;
        //¿Cómo muevo a temp?
        while(temp != null){
            cont++;
            temp = temp.getSiguiente();
        }
        return cont;
    }

    
    public void insertarEn(int valor, int pos) throws Exception{
         int cantNodos = tamaLista();
        //Que debemos validar?
        //Insertar en una posición no válida
       
        if(pos < 0)//Posiciones negativas
            throw new Exception("No puede insertarse un nodo en una posición negativa");
        else if(pos >= cantNodos)//Posiciones mayores a la cantidad de elementos
            throw new Exception(pos + " no es una posición valida en la lista");
        else{
            Nodo nuevoNodo = new Nodo(valor);
            if(pos == 0){//Insertar al inicio de la lista
                nuevoNodo.setSiguiente(inicio);
                inicio = nuevoNodo;
            }else{
                Nodo temp = inicio;
                int cont = 0;
                while(cont < (pos - 1)){
                    temp = temp.getSiguiente();
                    cont++;
            }
              //Y ahora que?
                nuevoNodo.setSiguiente(temp.getSiguiente());
                temp.setSiguiente(nuevoNodo);
        }
            
        }
        
    }
    public void vaciarlista(){
        inicio = null;
        fin = null;
    }
    public void borrarEn(int pos) throws Exception{
        //Que debemos validar?
        //Insertar en una posición no válida
       
        if(pos < 0)//Posiciones negativas
            throw new Exception("No puede insertarse un nodo en una posición negativa");
        else if(pos >= cantNodos)//Posiciones mayores a la cantidad de elementos
            throw new Exception(pos + " no es una posición valida en la lista");
        else{
        
    }
    
    }
}
